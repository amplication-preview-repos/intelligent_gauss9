/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  AccessPermission as PrismaAccessPermission,
  Group as PrismaGroup,
  List as PrismaList,
  User as PrismaUser,
} from "@prisma/client";

export class AccessPermissionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AccessPermissionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.accessPermission.count(args);
  }

  async accessPermissions<T extends Prisma.AccessPermissionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.AccessPermissionFindManyArgs>
  ): Promise<PrismaAccessPermission[]> {
    return this.prisma.accessPermission.findMany<Prisma.AccessPermissionFindManyArgs>(
      args
    );
  }
  async accessPermission<T extends Prisma.AccessPermissionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.AccessPermissionFindUniqueArgs>
  ): Promise<PrismaAccessPermission | null> {
    return this.prisma.accessPermission.findUnique(args);
  }
  async createAccessPermission<T extends Prisma.AccessPermissionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AccessPermissionCreateArgs>
  ): Promise<PrismaAccessPermission> {
    return this.prisma.accessPermission.create<T>(args);
  }
  async updateAccessPermission<T extends Prisma.AccessPermissionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.AccessPermissionUpdateArgs>
  ): Promise<PrismaAccessPermission> {
    return this.prisma.accessPermission.update<T>(args);
  }
  async deleteAccessPermission<T extends Prisma.AccessPermissionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.AccessPermissionDeleteArgs>
  ): Promise<PrismaAccessPermission> {
    return this.prisma.accessPermission.delete(args);
  }

  async getGroup(parentId: string): Promise<PrismaGroup | null> {
    return this.prisma.accessPermission
      .findUnique({
        where: { id: parentId },
      })
      .group();
  }

  async getList(parentId: string): Promise<PrismaList | null> {
    return this.prisma.accessPermission
      .findUnique({
        where: { id: parentId },
      })
      .list();
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.accessPermission
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
