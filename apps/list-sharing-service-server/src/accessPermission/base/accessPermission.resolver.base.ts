/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AccessPermission } from "./AccessPermission";
import { AccessPermissionCountArgs } from "./AccessPermissionCountArgs";
import { AccessPermissionFindManyArgs } from "./AccessPermissionFindManyArgs";
import { AccessPermissionFindUniqueArgs } from "./AccessPermissionFindUniqueArgs";
import { CreateAccessPermissionArgs } from "./CreateAccessPermissionArgs";
import { UpdateAccessPermissionArgs } from "./UpdateAccessPermissionArgs";
import { DeleteAccessPermissionArgs } from "./DeleteAccessPermissionArgs";
import { Group } from "../../group/base/Group";
import { List } from "../../list/base/List";
import { User } from "../../user/base/User";
import { AccessPermissionService } from "../accessPermission.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AccessPermission)
export class AccessPermissionResolverBase {
  constructor(
    protected readonly service: AccessPermissionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AccessPermission",
    action: "read",
    possession: "any",
  })
  async _accessPermissionsMeta(
    @graphql.Args() args: AccessPermissionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AccessPermission])
  @nestAccessControl.UseRoles({
    resource: "AccessPermission",
    action: "read",
    possession: "any",
  })
  async accessPermissions(
    @graphql.Args() args: AccessPermissionFindManyArgs
  ): Promise<AccessPermission[]> {
    return this.service.accessPermissions(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AccessPermission, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AccessPermission",
    action: "read",
    possession: "own",
  })
  async accessPermission(
    @graphql.Args() args: AccessPermissionFindUniqueArgs
  ): Promise<AccessPermission | null> {
    const result = await this.service.accessPermission(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AccessPermission)
  @nestAccessControl.UseRoles({
    resource: "AccessPermission",
    action: "create",
    possession: "any",
  })
  async createAccessPermission(
    @graphql.Args() args: CreateAccessPermissionArgs
  ): Promise<AccessPermission> {
    return await this.service.createAccessPermission({
      ...args,
      data: {
        ...args.data,

        group: args.data.group
          ? {
              connect: args.data.group,
            }
          : undefined,

        list: args.data.list
          ? {
              connect: args.data.list,
            }
          : undefined,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AccessPermission)
  @nestAccessControl.UseRoles({
    resource: "AccessPermission",
    action: "update",
    possession: "any",
  })
  async updateAccessPermission(
    @graphql.Args() args: UpdateAccessPermissionArgs
  ): Promise<AccessPermission | null> {
    try {
      return await this.service.updateAccessPermission({
        ...args,
        data: {
          ...args.data,

          group: args.data.group
            ? {
                connect: args.data.group,
              }
            : undefined,

          list: args.data.list
            ? {
                connect: args.data.list,
              }
            : undefined,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AccessPermission)
  @nestAccessControl.UseRoles({
    resource: "AccessPermission",
    action: "delete",
    possession: "any",
  })
  async deleteAccessPermission(
    @graphql.Args() args: DeleteAccessPermissionArgs
  ): Promise<AccessPermission | null> {
    try {
      return await this.service.deleteAccessPermission(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Group, {
    nullable: true,
    name: "group",
  })
  @nestAccessControl.UseRoles({
    resource: "Group",
    action: "read",
    possession: "any",
  })
  async getGroup(
    @graphql.Parent() parent: AccessPermission
  ): Promise<Group | null> {
    const result = await this.service.getGroup(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => List, {
    nullable: true,
    name: "list",
  })
  @nestAccessControl.UseRoles({
    resource: "List",
    action: "read",
    possession: "any",
  })
  async getList(
    @graphql.Parent() parent: AccessPermission
  ): Promise<List | null> {
    const result = await this.service.getList(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  @nestAccessControl.UseRoles({
    resource: "User",
    action: "read",
    possession: "any",
  })
  async getUser(
    @graphql.Parent() parent: AccessPermission
  ): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
