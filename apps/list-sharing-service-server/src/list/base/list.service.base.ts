/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  List as PrismaList,
  AccessPermission as PrismaAccessPermission,
  User as PrismaUser,
} from "@prisma/client";

export class ListServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ListCountArgs, "select">): Promise<number> {
    return this.prisma.list.count(args);
  }

  async lists<T extends Prisma.ListFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ListFindManyArgs>
  ): Promise<PrismaList[]> {
    return this.prisma.list.findMany<Prisma.ListFindManyArgs>(args);
  }
  async list<T extends Prisma.ListFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ListFindUniqueArgs>
  ): Promise<PrismaList | null> {
    return this.prisma.list.findUnique(args);
  }
  async createList<T extends Prisma.ListCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ListCreateArgs>
  ): Promise<PrismaList> {
    return this.prisma.list.create<T>(args);
  }
  async updateList<T extends Prisma.ListUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ListUpdateArgs>
  ): Promise<PrismaList> {
    return this.prisma.list.update<T>(args);
  }
  async deleteList<T extends Prisma.ListDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ListDeleteArgs>
  ): Promise<PrismaList> {
    return this.prisma.list.delete(args);
  }

  async findAccessPermissions(
    parentId: string,
    args: Prisma.AccessPermissionFindManyArgs
  ): Promise<PrismaAccessPermission[]> {
    return this.prisma.list
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .accessPermissions(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.list
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
